<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blog.Core</name>
    </assembly>
    <members>
        <member name="T:Blog.Core.BlogCacheAOP">
            <summary>
            切面缓存设置
            </summary>
        </member>
        <member name="M:Blog.Core.BlogCacheAOP.#ctor(Blog.Core.ICaching)">
            <summary>
            构造注入
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:Blog.Core.BlogCacheAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实现方法Intercept方法是拦截的关键所在，也是IInterceptor接口中的唯一定义
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Blog.Core.BlogCacheAOP.CustomCacheKey(Castle.DynamicProxy.IInvocation)">
            <summary>
            自定义缓存键
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.BlogLogAOP">
            <summary>
            拦截器 
            </summary>
        </member>
        <member name="M:Blog.Core.BlogLogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化接口IINterceptor的唯一方法Intercept
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:Blog.Core.Aop.BlogRedisCacheAOP">
            <summary>
            Redis缓存AOP
            </summary>
        </member>
        <member name="F:Blog.Core.Aop.BlogRedisCacheAOP._redisCache">
            <summary>
            通过注入的方式，把缓存操作接口通过构造注入
            </summary>
        </member>
        <member name="M:Blog.Core.Aop.BlogRedisCacheAOP.#ctor(Blog.Core.Common.IRedisCacheManager)">
            <summary>
            构造注入
            </summary>
            <param name="redisCache"></param>
        </member>
        <member name="M:Blog.Core.Aop.BlogRedisCacheAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实现拦截器防范  Intercept方法是拦截的关键所在也是IInterceptor接口中唯一的定义
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:Blog.Core.Aop.BlogRedisCacheAOP.CustomCacheKey(Castle.DynamicProxy.IInvocation)">
            <summary>
            自定义缓存键
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.ICaching">
            <summary>
            简单的缓存接口，只有查询和添加，后面会扩展
            </summary>
        </member>
        <member name="M:Blog.Core.MemoryCaching.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            构造
            </summary>
            <param name="imemoryCache"></param>
        </member>
        <member name="M:Blog.Core.AuthHelper.OverWrite.JwtHelper.IssueJWT(Blog.Core.AuthHelper.OverWrite.TokenModelJWT)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.AuthHelper.OverWrite.JwtHelper.SerializeJWT(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.AuthHelper.OverWrite.TokenModelJWT">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.OverWrite.TokenModelJWT.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.OverWrite.TokenModelJWT.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:Blog.Core.AuthHelper.OverWrite.TokenModelJWT.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:Blog.Core.AuthHelper.OverWrite.JwtTokenAuth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blog.Core.AuthHelper.OverWrite.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="T:Blog.Core.CustomProfile">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blog.Core.CustomProfile.#ctor">
            <summary>
            配置构造函数，用来创建关系映射
            </summary>
        </member>
        <member name="T:Blog.Core.Controllers.BlogController">
            <summary>
            Blog控制器所有接口
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.#ctor(Blog.Core.IServices.IAdvertisementServices,Blog.Core.IServices.IBlogArticleServices)">
            <summary>
            构造函数
            </summary>
            <param name="services"></param>
            /// <param name="blogAtricleService"></param>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.GetBlogs">
            <summary>
            获取博文列表
            </summary>
            <param name="id"></param>
            <param name="page"></param>
            <param name="bcategory"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.GetDetail(System.Int32,System.Int32)">
            <summary>
            获取详情
            </summary>
            <param name="id"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.Get(System.Int32)">
            <summary>
            根据ID获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.PostTest(Blog.Core.Model.Class1)">
            <summary>
            测试Model 文字说明
            </summary>
            <param name="test"></param>
        </member>
        <member name="M:Blog.Core.Controllers.BlogController.Sum(System.Int32,System.Int32)">
            <summary>
            Sum接口
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.LoginController">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.Getjsonp(System.String,System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            测试跨域请求
            </summary>
            <param name="callBack"></param>
            <param name="id"></param>
            <param name="sub"></param>
            <param name="expiresSliding"></param>
            <param name="expiresAbsoulute"></param>
        </member>
    </members>
</doc>
